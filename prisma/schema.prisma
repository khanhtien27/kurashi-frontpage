generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String  @id @default(uuid())
  email String  @unique
  name  String?
  posts Post[]
}

model Post {
  id             String        @id @default(uuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  title          String
  content        String?
  published      Boolean       @default(false)
  viewCount      Int           @default(0)
  author         User?         @relation(fields: [authorId], references: [id])
  postCategoryId String?
  postCategory   PostCategory? @relation(fields: [postCategoryId], references: [id])
  authorId       String?
  thumbnail      String
  url            String        @default("#")
  isTrending     Boolean       @default(false)
  summary        String        @default("Post summary")
}

model PostCategory {
  id           String  @id @default(uuid())
  categoryName String
  published    Boolean @default(false)
  Post         Post[]
}

model Product {
  id              String             @id @default(uuid())
  name            String
  productId       String             @default("")
  thumbnail       String             @default("#")
  url             String             @default("#")
  categoryId      String?
  isAvailable     Boolean            @default(false)
  subCategoryId   String?
  productIntro    ProductIntro[]
  size            ProductSize?
  category        Category?          @relation(fields: [categoryId], references: [id])
  subCategory     SubCategory?       @relation(fields: [subCategoryId], references: [id])
  origin          ProductOrigin[]
  component       ProductComponent[]
  ProductMetadata ProductMetadata?
  ProductColor    ProductColor[]
  ProductTag      ProductTag[]
}

model ProductIntro {
  id        String   @id @default(uuid())
  title     String
  content   String
  introImg  String
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model ProductSize {
  id               String             @id @default(uuid())
  unit             String             @default("mm")
  productSizeImage String             @default("#")
  quantity         Int
  twoDimCad        String
  productManual    String
  product          Product?           @relation(fields: [productId], references: [id])
  productId        String?            @unique
  dimension        ProductDimension[]
}

model ProductDimension {
  id            String       @id @default(uuid())
  name          String
  value         Float
  ProductSize   ProductSize? @relation(fields: [productSizeId], references: [id])
  productSizeId String?
}

model ProductComponent {
  id        String            @id @default(uuid())
  name      String
  productId String?
  product   Product?          @relation(fields: [productId], references: [id])
  material  ProductMaterial[]
}

model Category {
  id                String        @id @default(uuid())
  name              String
  isSpecialCategory Boolean
  productId         Product[]
  subCategories     SubCategory[]
}

model SubCategory {
  id         String    @id @default(uuid())
  name       String
  thumbnail  String
  products   Product[]
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])
}

model ProductMaterial {
  id      String             @id @default(uuid())
  name    String
  product ProductComponent[]
}

model ProductOrigin {
  id      String    @id @default(uuid())
  name    String
  product Product[]
}

model ProductMetadata {
  id        String   @id @default(uuid())
  productId String?  @unique
  Product   Product? @relation(fields: [productId], references: [id])
}

model ProductColor {
  id        String   @id @default(uuid())
  name      String
  colorHex  String
  productId String?
  product   Product? @relation(fields: [productId], references: [id])
}

model ProductTag {
  id        String   @id @default(uuid())
  name      String
  productId String?
  product   Product? @relation(fields: [productId], references: [id])
}
