generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String  @id @default(uuid())
  email String  @unique
  name  String?
  posts Post[]
}

model Post {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  published Boolean  @default(false)
  viewCount Int      @default(0)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  thumbnail String
  url       String   @default("#")
}

model Product {
  id            String             @id @default(uuid())
  name          String
  productId     String             @default("")
  thumbnail     String             @default("#")
  url           String             @default("#")
  categoryId    String?
  isAvailable   Boolean            @default(false)
  subCategoryId String?
  productIntro  ProductIntro[]
  size          ProductSize?
  category      Category?          @relation(fields: [categoryId], references: [id])
  subCategory   SubCategory?       @relation(fields: [subCategoryId], references: [id])
  origin        ProductOrigin[]
  component     ProductComponent[]
}

model ProductIntro {
  id        String   @id @default(uuid())
  title     String
  content   String
  introImg  String
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model ProductSize {
  id            String             @id @default(uuid())
  unit          String             @default("mm")
  quantity      Int
  twoDimCad     String
  productManual String
  product       Product?           @relation(fields: [productId], references: [id])
  productId     String?            @unique
  dimension     ProductDimension[]
}

model ProductDimension {
  id            String       @id @default(uuid())
  name          String
  value         Float
  ProductSize   ProductSize? @relation(fields: [productSizeId], references: [id])
  productSizeId String?
}

model ProductComponent {
  id        String            @id @default(uuid())
  name      String
  productId String?
  product   Product?          @relation(fields: [productId], references: [id])
  material  ProductMaterial[]
}

model Category {
  id                String        @id @default(uuid())
  name              String
  isSpecialCategory Boolean
  productId         Product[]
  subCategories     SubCategory[]
}

model SubCategory {
  id         String    @id @default(uuid())
  name       String
  thumbnail  String
  products   Product[]
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])
}

model ProductMaterial {
  id      String             @id @default(uuid())
  name    String
  product ProductComponent[]
}

model ProductOrigin {
  id      String    @id @default(uuid())
  name    String
  product Product[]
}
